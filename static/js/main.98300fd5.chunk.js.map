{"version":3,"sources":["GridPreview.tsx","GridProperties.tsx","GridTable.tsx","CssGridTemplateAreas.ts","gridExamples.ts","App.tsx","index.tsx"],"names":["GridPreview","propertyValue","namedAreas","gridStyleNamedRegions","gridTemplateAreas","useState","count","setCount","onClick","className","style","Array","from","map","name","gridArea","keys","i","GridProperties","rows","isRectangular","columnsPerRow","nonContiguousAreas","nonContigousAreas","join","isEmpty","GridTable","gridTemplate","row","index","CssGridTemplateAreas","gridTemplateString","matchAll","match","this","compact","trim","split","length","every","val","arr","Error","names","Set","flat","delete","indicesByRow","indices","idx","indexOf","push","j","isEqual","filter","isContiguous","gridExamples","Correct","App","gridInput","setGridInput","grid","href","onChange","e","input","target","value","Object","entries","findNotContiguous","toPropertyValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98300fd5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ntype Props = {\n  propertyValue: string;\n  namedAreas: Set<string>;\n};\n\nconst GridPreview: React.FC<Props> = ({ propertyValue, namedAreas }: Props) => {\n  const gridStyleNamedRegions = {\n    gridTemplateAreas: propertyValue,\n  };\n\n  const [count, setCount] = useState(0);\n\n  return (\n    <>\n      <h2>View preview of named areas</h2>\n      <div>\n        Rendered using CSS grid.\n        <button onClick={() => setCount(count + 1)}>Add grid child</button>\n        {count > 0 ? (\n          <button onClick={() => setCount(count - 1)}>Remove grid child</button>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className=\"grid-preview\" style={gridStyleNamedRegions}>\n        {Array.from(namedAreas).map((name: string) => {\n          return (\n            <div key={name} style={{ gridArea: `${name}` }}>\n              {name}\n            </div>\n          );\n        })}\n        {Array.from(Array(count).keys()).map((i: number) => (\n          <div key={i}>.</div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GridPreview;\n","import React from \"react\";\n\nimport isEmpty from \"lodash.isempty\";\n\ntype Props = {\n  rows: number;\n  isRectangular: boolean;\n  columnsPerRow: number[];\n  nonContigousAreas: Set<string>;\n};\n\nconst GridProperties: React.FC<Props> = ({\n  rows,\n  isRectangular,\n  columnsPerRow,\n  nonContigousAreas: nonContiguousAreas,\n}: Props) => {\n  return (\n    <ul className=\"grid-properties\">\n      <li className={rows === 0 ? \"invalid\" : \"\"}>has {rows} rows</li>\n      <li className={!isRectangular ? \"invalid\" : \"\"}>\n        is {!isRectangular && \"not\"} rectangular\n      </li>\n      <li className={!isRectangular ? \"invalid\" : \"\"}>\n        has {isRectangular ? columnsPerRow[0] : columnsPerRow.join(\", \")}{\" \"}\n        columns per row\n      </li>\n      <li className={!isEmpty(nonContiguousAreas) ? \"invalid\" : \"\"}>\n        {isEmpty(nonContiguousAreas) ? (\n          \"All areas are contiguous and rectangular\"\n        ) : (\n          <>\n            The following areas are not contiguous or rectangular:\n            {Array.from(nonContiguousAreas).map((name: string) => (\n              <code key={name}>{name}</code>\n            ))}\n          </>\n        )}\n      </li>\n    </ul>\n  );\n};\n\nexport default GridProperties;\n","import React from \"react\";\n\ntype Props = {\n  gridTemplate: string[][];\n};\n\nconst GridTable: React.FC<Props> = ({ gridTemplate }: Props) => {\n  return (\n    <>\n      <h2>View tabular rendering of grid</h2>\n      <table className=\"grid-table\">\n        <tbody>\n          {gridTemplate.map((row: string[], index: number) => (\n            <tr key={index}>\n              {row.map((name: string, index: number) => (\n                <td key={index}>{name}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default GridTable;\n","import isEqual from \"lodash.isequal\";\nimport compact from \"lodash.compact\";\n\nclass CssGridTemplateAreas {\n  gridTemplate: string[][];\n\n  constructor(gridTemplateString: string) {\n    const rows = Array.from(\n      gridTemplateString.matchAll(/[\"']([^\"']*)[\"']/g)\n    ).map((match) => match[1]);\n    this.gridTemplate = rows.map((row) => compact(row.trim().split(\" \")));\n  }\n\n  rows(): number {\n    return this.gridTemplate.length;\n  }\n\n  columnsPerRow(): number[] {\n    return this.gridTemplate.map((row) => row.length);\n  }\n\n  isRectangular(): boolean {\n    return this.columnsPerRow().every(\n      (val: number, i, arr: number[]) => val === arr[0]\n    );\n  }\n\n  columns(): number {\n    if (!this.isRectangular()) {\n      throw new Error(\"rows have different number of columns\");\n    }\n    return this.columnsPerRow()[0];\n  }\n\n  namedAreas(): Set<string> {\n    const names: Set<string> = new Set(this.gridTemplate.flat());\n    names.delete(\".\");\n    return names;\n  }\n\n  toPropertyValue(): string {\n    return this.gridTemplate.map((row) => `\"${row.join(\" \")}\"`).join(\" \");\n  }\n\n  /** find if a named area is contigous and rectangular */\n  isContiguous(name: string): boolean {\n    const indicesByRow: number[][] = this.gridTemplate.map((row) => {\n      const indices: number[] = [];\n      let idx: number = row.indexOf(name);\n      while (idx !== -1) {\n        indices.push(idx);\n        idx = row.indexOf(name, idx + 1);\n      }\n      return indices;\n    });\n    for (let i = 0; i < indicesByRow.length; i++) {\n      for (let j: number = i + 1; j < indicesByRow.length; j++) {\n        if (indicesByRow[i].length === 0 || indicesByRow[j].length === 0) {\n          continue;\n        }\n        if (!isEqual(indicesByRow[i], indicesByRow[j])) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  findNotContiguous(): Set<string> {\n    return new Set(\n      Array.from(this.namedAreas()).filter((name) => !this.isContiguous(name))\n    );\n  }\n}\n\nexport default CssGridTemplateAreas;\n","const gridExamples: Record<string, string> = {\n  Correct: `\"a a .\"\n\"a a .\"\n\". b c\";`,\n  \"Not Rectangular\": `'header header header header header header'\n'menu main main main right right'\n'menu footer footer footer footer';`,\n  \"Not Contiguous\": `\"header header header header\"\n\"main main . sidebar\"\n\"footer footer footer header\";`,\n};\n\nexport default gridExamples;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport GridPreview from \"./GridPreview\";\nimport GridProperties from \"./GridProperties\";\nimport GridTable from \"./GridTable\";\nimport CssGridTemplateAreas from \"./CssGridTemplateAreas\";\nimport gridExamples from \"./gridExamples\";\n\nconst App: React.FC = () => {\n  const [gridInput, setGridInput] = useState(gridExamples[\"Correct\"]);\n  const grid = new CssGridTemplateAreas(gridInput);\n\n  function onGridInputChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    const input: string = e.target.value;\n    setGridInput(input);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>CSS Grid Template Validator & Preview</h1>\n        <div>\n          Validate CSS Grid Template Area property values. Paste your{\" \"}\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas\">\n            <code>grid-template-areas</code>\n          </a>{\" \"}\n          property value to preview, validate, and debug.\n        </div>\n      </header>\n      <main>\n        <textarea onChange={onGridInputChange} value={gridInput}></textarea>\n        <div>\n          Examples:\n          {Object.entries(gridExamples).map(([name, value]) => (\n            <button key=\"name\" onClick={() => setGridInput(value)}>\n              {name}\n            </button>\n          ))}\n        </div>\n        <GridProperties\n          rows={grid.rows()}\n          columnsPerRow={grid.columnsPerRow()}\n          isRectangular={grid.isRectangular()}\n          nonContigousAreas={grid.findNotContiguous()}\n        />\n        <GridPreview\n          namedAreas={grid.namedAreas()}\n          propertyValue={grid.toPropertyValue()}\n        />\n        <GridTable gridTemplate={grid.gridTemplate} />\n      </main>\n      <footer>\n        <ul>\n          <a href=\"https://github.com/evrom/grid-validator\">\n            <li>Github</li>\n          </a>\n          <a href=\"https://evrom.github.io/\">\n            <li>About me</li>\n          </a>\n        </ul>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}