{"version":3,"sources":["GridPreview.tsx","GridProperties.tsx","GridTable.tsx","CssGridTemplateAreas.ts","gridExamples.ts","App.tsx","index.tsx"],"names":["GridPreview","propertyValue","namedAreas","gridStyleNamedRegions","gridTemplateAreas","useState","count","setCount","onClick","className","style","Array","from","map","name","index","gridArea","GridProperties","rows","isRectangular","columnsPerRow","nonContiguousAreas","nonContigousAreas","join","isEmpty","GridTable","gridTemplate","row","CssGridTemplateAreas","gridTemplateString","matchAll","match","this","compact","trim","split","length","i","every","val","arr","Error","names","Set","flat","delete","indicesByRow","indices","idx","indexOf","push","j","isEqual","filter","isContiguous","gridExamples","App","gridInput","setGridInput","grid","onChange","e","input","target","value","Object","entries","findNotContiguous","toPropertyValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8311a00e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ntype GridPreviewProps = {\n  propertyValue: string,\n  namedAreas: Set<string>\n}\n\nfunction GridPreview({ propertyValue, namedAreas }: GridPreviewProps) {\n  const gridStyleNamedRegions = {\n    gridTemplateAreas: propertyValue\n  }\n\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <h2>View preview of named areas</h2>\n      <div>\n        Rendered using CSS grid.\n        <button onClick={() => setCount(count + 1)}>Add grid child</button>\n        {count > 0 ? <button onClick={() => setCount(count - 1)}>Remove grid child</button> : ''}\n      </div>\n      <div className=\"grid-preview\" style={gridStyleNamedRegions}>\n        {Array.from(namedAreas).map((name: string, index: number) => {\n          return <div key={name} style={{ gridArea: `${name}` }}>{name}</div>\n        })}\n        {Array.from(Array(count)).map(() => (\n          <div>.</div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default GridPreview;","import React from 'react';\n\nimport isEmpty from 'lodash.isempty';\n\ntype GridPropertiesProps = {\n  rows: number,\n  isRectangular: boolean,\n  columnsPerRow: number[],\n  nonContigousAreas: Set<string>\n}\n\nfunction GridProperties({ rows, isRectangular, columnsPerRow, nonContigousAreas: nonContiguousAreas }: GridPropertiesProps) {\n  return (\n    <ul className=\"grid-properties\">\n      <li className={rows === 0 ? 'invalid' : ''}>has {rows} rows</li>\n      <li className={!isRectangular ? 'invalid' : ''}>is {!isRectangular && 'not'} rectangular</li>\n      <li className={!isRectangular ? 'invalid' : ''}>has {isRectangular ? columnsPerRow[0] : columnsPerRow.join(', ')} columns per row</li>\n      <li className={!isEmpty(nonContiguousAreas) ? 'invalid' : ''}>\n        {\n          isEmpty(nonContiguousAreas) ?\n            'All areas are contiguous and rectangular' :\n            <>\n              The following areas are not contiguous or rectangular:\n              {Array.from(nonContiguousAreas).map((name: string) => <code>{name}</code>)}\n            </>\n        }\n      </li>\n    </ul>\n  )\n}\n\nexport default GridProperties;\n","import React from 'react';\n\ntype gridTemplateProps = {\n  gridTemplate: string[][]\n}\n\nfunction GridTable({ gridTemplate }: gridTemplateProps) {\n  return (\n    <>\n      <h2>View tabular rendering of grid</h2>\n      <table className=\"grid-table\">\n        <tbody>\n          {gridTemplate.map((row: string[], index: number) => (\n            <tr key={index}>\n              {row.map((name: string, index: number) => (\n                <td key={index}>{name}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default GridTable;","import isEqual from 'lodash.isequal';\nimport compact from 'lodash.compact';\n\nclass CssGridTemplateAreas {\n  gridTemplate: string[][];\n\n  constructor(gridTemplateString: string) {\n    const rows = Array.from(gridTemplateString.matchAll(/[\"']([^\"']*)[\"']/g)).map(match => match[1])\n    this.gridTemplate = rows.map(row => compact(row.trim().split(\" \")));\n  }\n\n  rows(): number {\n    return this.gridTemplate.length\n  }\n\n  columnsPerRow(): number[] {\n    return this.gridTemplate.map((row, i) => row.length)\n  }\n\n  isRectangular(): boolean {\n    return this.columnsPerRow().every( (val: number, i, arr: number[]) => val === arr[0] )\n  }\n\n  columns(): number {\n    if (!this.isRectangular()){\n      throw new Error('rows have different number of columns');\n    }\n    return this.columnsPerRow()[0]\n  }\n\n  namedAreas(): Set<string> {\n    const names: Set<string> = new Set(this.gridTemplate.flat());\n    names.delete('.');\n    return names;\n  }\n\n  toPropertyValue(): string {\n    return this.gridTemplate.map(row => `\"${row.join(' ')}\"`).join(' ');\n  }\n\n  /** find if a named area is contigous and rectangular */\n  isContiguous(name: string){\n    const indicesByRow: number[][] = this.gridTemplate.map(row => {\n      const indices: number[] = [];\n      let idx: number = row.indexOf(name);\n      while (idx !== -1) {\n        indices.push(idx);\n        idx = row.indexOf(name, idx + 1);\n      }\n      return indices;\n    })\n    for (let i: number = 0; i < indicesByRow.length; i++) {\n      for (let j: number = i + 1; j < indicesByRow.length; j++ ){\n        if (indicesByRow[i].length === 0 || indicesByRow[j].length === 0){\n          continue;\n        }\n        if (!isEqual(indicesByRow[i], indicesByRow[j])){\n          return false;\n        }\n      }\n    } \n    return true;\n  }\n\n  findNotContiguous(): Set<string> {\n    return new Set(Array.from(this.namedAreas()).filter(name => !this.isContiguous(name)))\n  }\n}\n\nexport default CssGridTemplateAreas;","const gridExamples: Record<string, string> = {\n  \"Correct\": `\"a a .\"\n\"a a .\"\n\". b c\";`,\n  \"Not Rectangular\": `'header header header header header header'\n'menu main main main right right'\n'menu footer footer footer footer';`,\n  \"Not Contiguous\": `\"header header header header\"\n\"main main . sidebar\"\n\"footer footer footer header\";`\n}\n\nexport default gridExamples","import React, { useState } from 'react';\nimport './App.scss';\nimport GridPreview from './GridPreview';\nimport GridProperties from './GridProperties';\nimport GridTable from './GridTable';\nimport CssGridTemplateAreas from './CssGridTemplateAreas';\nimport gridExamples from './gridExamples';\n\nfunction App() {\n  const [gridInput, setGridInput] = useState(`\"a a .\"\n\"a a .\"\n\". b c\";`);\n  let grid = new CssGridTemplateAreas(gridInput);\n\n  function onGridInputChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    const input: string = e.target.value;\n    setGridInput(input);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>CSS Grid Template Validator & Preview</h1>\n        <div>Paste your <code>grid-template-areas</code> property value and see a preview and diagnosis what is wrong.</div>\n      </header>\n      <main>\n        <textarea onChange={onGridInputChange} value={gridInput}></textarea>\n        <div>Examples:\n          {Object.entries(gridExamples).map(([name, value]) => (\n            <button onClick={() => setGridInput(value)}>\n              {name}\n            </button>\n          ))}\n        </div>\n        <GridProperties\n          rows={grid.rows()}\n          columnsPerRow={grid.columnsPerRow()}\n          isRectangular={grid.isRectangular()}\n          nonContigousAreas={grid.findNotContiguous()}\n        />\n        <GridPreview\n          namedAreas={grid.namedAreas()}\n          propertyValue={grid.toPropertyValue()}\n        />\n        <GridTable gridTemplate={grid.gridTemplate} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './water.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}